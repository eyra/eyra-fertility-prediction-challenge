install.packages("stats")
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("survival")
install.packages("survival")
library(survival)
install.packages("eha")
library(readxl)
Training_Data <- read_excel("//utuhome.utu.fi/tjnise/Fertility workshop/Training Data.xlsx")
View(Training_Data)
library(foreign)
load("//utuhome.utu.fi/tjnise/Sociogenomics/PGI_application/data")
hrs_GePhen_uni <- read.dta(""//utuhome.utu.fi/tjnise/Sociogenomics/PGI_application/data")
hrs_GePhen_uni <- read.dta("//utuhome.utu.fi/tjnise/Sociogenomics/PGI_application/data")
###### Select variables
vars_prediction <- c("raedyrs","ea_pgs3_edu2_ssgac16",
"ea_pgs3_edu3_ssgac18","rabyear","ragender","pc1_5a",
"pc1_5b","pc1_5c","pc1_5d","pc1_5e","pc6_10a", "pc6_10b",
"pc6_10c","pc6_10d","pc6_10e")
###### Summarize variables
data_prediction <- hrs_GePhen_uni[vars_prediction]
summary(data_prediction$raedyrs)
###### Select and summarise score
d_PGS3 <- density(data_prediction$ea_pgs3_edu3_ssgac18)
plot(d_PGS3, main= "Kernel Density PGS3")
###### Estimate models
# Model 1: Edu = PGS2 + Cov
predic_control_PGS2 <- lm(raedyrs~ ea_pgs3_edu2_ssgac16+rabyear+
ragender +pc1_5a+pc1_5b+pc1_5c+pc1_5d +pc1_5e+ +
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e, data = data_prediction)
summary(predic_control_PGS2)
# Model 2: Edu = PGS3 + Cov
predic_control_PGS3 <- lm(raedyrs~ ea_pgs3_edu3_ssgac18+rabyear+ragender
+pc1_5a+pc1_5b+pc1_5c+pc1_5d +pc1_5e+pc6_10a+pc6_10b+pc6_10c+
pc6_10d+pc6_10e, data = data_prediction)
summary(predic_control_PGS3)
# Model 3: Edu = Cov
predic_control <- lm(raedyrs~ rabyear+ragender +pc1_5a+ pc1_5b+pc1_5c+
pc1_5d+pc1_5e+pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data=data_prediction)
###### Look at output
summary(predic_control_PGS2)$r.square-summary(predic_control)$r.square
summary(predic_control_PGS3)$r.square-summary(predic_control)$r.square
###### Clean R
rm(vars_prediction,predic_control,predic_control_PGS2,
predic_control_PGS3,data_prediction,d_EduYears, d_PGS2,d_PGS3)
###### Look at output
summary(predic_control_PGS2)$r.square-summary(predic_control)$r.square
####### Average BMI across waves: BIM_AV
bmi <-c("r1bmi", "r2bmi", "r3bmi", "r4bmi", "r5bmi",
"r6bmi", "r7bmi", "r8bmi", "r9bmi", "r10bmi",
"r11bmi", "r12bmi")
hrs_GePhen_uni$BMI_AV = rowMeans(hrs_GePhen_uni[,bmi], na.rm = TRUE)
summary(hrs_GePhen_uni$BMI_AV)
####### Average height across waves: Height_AV
height <-c("r1height", "r2height", "r3height", "r4height",
"r5height", "r6height", "r7height", "r8height",
"r9height", "r10height", "r11height", "r12height")
hrs_GePhen_uni$Height_AV = rowMeans(hrs_GePhen_uni[,height], na.rm = TRUE)
summary(hrs_GePhen_uni$Height_AV)
####### Average Age across waves: Age_AV
age <-c("r1agey_b", "r2agey_b","r3agey_b","r4agey_b","r5agey_b",
"r6agey_b","r7agey_b","r8agey_b","r9agey_b","r10agey_b",
"r11agey_b", "r12agey_b")
hrs_GePhen_uni$Age_AV = rowMeans(hrs_GePhen_uni[,age], na.rm = TRUE)
summary(hrs_GePhen_uni$Age_AV)
####### Average Health across waves: Health_AV
health <- c("r1conde", "r2conde","r3conde", "r4conde", "r5conde",
"r6conde", "r7conde", "r8conde", "r9conde", "r10conde",
"r11conde", "r12conde")
hrs_GePhen_uni$Health_AV = rowMeans(hrs_GePhen_uni[,health], na.rm = TRUE)
summary(hrs_GePhen_uni$Health_AV)
bles for analyses
####### Center variables
data_rG$Height_AV_scaled =scale(data_rG$Height_AV)
vars_rG <- c("Height_AV", "BMI_AV", "Health_AV", "ea_pgs3_edu3_ssgac18",
"Age_AV", "raedyrs", "raevbrn", "rabyear", "ragender",
"pc1_5a", "pc1_5b","pc1_5c","pc1_5d", "pc1_5e",
"pc6_10a", "pc6_10b", "pc6_10c", "pc6_10d", "pc6_10e")
data_rG <- hrs_GePhen_uni[vars_rG]
####### Center variables
data_rG$Height_AV_scaled =scale(data_rG$Height_AV)
data_rG$BMI_AV_scaled = scale(data_rG$BMI_AV)
data_rG$raedyrs_scaled =scale(data_rG$raedyrs)
data_rG$Health_AV_scaled =scale(data_rG$Health_AV)
data_rG$raevbrn_scaled =scale(data_rG$raevbrn)
####### Estimate models
# cross-trait prediction
M_rGHeight <- lm(Height_AV_scaled~ ea_pgs3_edu3_ssgac18+rabyear+ragender
+pc1_5a+pc1_5b+pc1_5c+pc1_5d +pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data =data_rG)
M_rHeight <- lm(Height_AV_scaled~ raedyrs_scaled +rabyear+ragender +
pc1_5a+pc1_5b+pc1_5c+pc1_5d+pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data=data_rG)
# cross-trait prediction
M_rGBMI <- lm(BMI_AV_scaled~ ea_pgs3_edu3_ssgac18+rabyear+ragender
+pc1_5a+pc1_5b+pc1_5c+pc1_5d +pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data =data_rG)
M_rBMI<- lm(BMI_AV_scaled~ raedyrs_scaled+rabyear+ragender +
pc1_5a+pc1_5b+pc1_5c+pc1_5d+ pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data= data_rG)
# cross-trait prediction
M_rGFert <- lm(raevbrn_scaled~ ea_pgs3_edu3_ssgac18+rabyear+ragender +
pc1_5a+pc1_5b+pc1_5c+pc1_5d+pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data =data_rG)
M_rFert<- lm(raevbrn_scaled~ raedyrs_scaled+rabyear+ragender +
pc1_5a+pc1_5b+pc1_5c+pc1_5d+ pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data= data_rG)
# cross-trait prediction
M_rGHealth <- lm(Health_AV_scaled~ Age_AV+ea_pgs3_edu3_ssgac18+rabyear+ragender
+pc1_5a+pc1_5b+pc1_5c+pc1_5d+pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e, data=data_rG)
M_rHealth<- lm(Health_AV_scaled~ raedyrs_scaled+rabyear+ragender +
pc1_5a+pc1_5b+pc1_5c+pc1_5d+ pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data= data_rG)
####### Install helper packages
install.packages("tidyverse")
library(tidyverse)
install.packages("broom")
library(broom)
install.packages("stargazer")
library(stargazer)
install.packages("broom")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("broom")
library(broom)
library()
install.packages("tidyverse")
library(foreign)
hrs_GePhen_uni <- read.dta("//utuhome.utu.fi/tjnise/Sociogenomics/PGI_application/data")
###### Select variables
vars_prediction <- c("raedyrs","ea_pgs3_edu2_ssgac16",
"ea_pgs3_edu3_ssgac18","rabyear","ragender","pc1_5a",
"pc1_5b","pc1_5c","pc1_5d","pc1_5e","pc6_10a", "pc6_10b",
"pc6_10c","pc6_10d","pc6_10e")
###### Summarize variables
data_prediction <- hrs_GePhen_uni[vars_prediction]
summary(data_prediction$raedyrs)
###### Select and summarise score
d_PGS3 <- density(data_prediction$ea_pgs3_edu3_ssgac18)
plot(d_PGS3, main= "Kernel Density PGS3")
###### Estimate models
# Model 1: Edu = PGS2 + Cov
predic_control_PGS2 <- lm(raedyrs~ ea_pgs3_edu2_ssgac16+rabyear+
ragender +pc1_5a+pc1_5b+pc1_5c+pc1_5d +pc1_5e+ +
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e, data = data_prediction)
summary(predic_control_PGS2)
# Model 2: Edu = PGS3 + Cov
predic_control_PGS3 <- lm(raedyrs~ ea_pgs3_edu3_ssgac18+rabyear+ragender
+pc1_5a+pc1_5b+pc1_5c+pc1_5d +pc1_5e+pc6_10a+pc6_10b+pc6_10c+
pc6_10d+pc6_10e, data = data_prediction)
summary(predic_control_PGS3)
# Model 3: Edu = Cov
predic_control <- lm(raedyrs~ rabyear+ragender +pc1_5a+ pc1_5b+pc1_5c+
pc1_5d+pc1_5e+pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data=data_prediction)
###### Look at output
summary(predic_control_PGS2)$r.square-summary(predic_control)$r.square
summary(predic_control_PGS3)$r.square-summary(predic_control)$r.square
###### Clean R
rm(vars_prediction,predic_control,predic_control_PGS2,
predic_control_PGS3,data_prediction,d_EduYears, d_PGS2,d_PGS3)
####### Average BMI across waves: BIM_AV
bmi <-c("r1bmi", "r2bmi", "r3bmi", "r4bmi", "r5bmi",
"r6bmi", "r7bmi", "r8bmi", "r9bmi", "r10bmi",
"r11bmi", "r12bmi")
hrs_GePhen_uni$BMI_AV = rowMeans(hrs_GePhen_uni[,bmi], na.rm = TRUE)
summary(hrs_GePhen_uni$BMI_AV)
####### Average height across waves: Height_AV
height <-c("r1height", "r2height", "r3height", "r4height",
"r5height", "r6height", "r7height", "r8height",
"r9height", "r10height", "r11height", "r12height")
hrs_GePhen_uni$Height_AV = rowMeans(hrs_GePhen_uni[,height], na.rm = TRUE)
summary(hrs_GePhen_uni$Height_AV)
####### Average Age across waves: Age_AV
age <-c("r1agey_b", "r2agey_b","r3agey_b","r4agey_b","r5agey_b",
"r6agey_b","r7agey_b","r8agey_b","r9agey_b","r10agey_b",
"r11agey_b", "r12agey_b")
hrs_GePhen_uni$Age_AV = rowMeans(hrs_GePhen_uni[,age], na.rm = TRUE)
summary(hrs_GePhen_uni$Age_AV)
####### Average Health across waves: Health_AV
health <- c("r1conde", "r2conde","r3conde", "r4conde", "r5conde",
"r6conde", "r7conde", "r8conde", "r9conde", "r10conde",
"r11conde", "r12conde")
hrs_GePhen_uni$Health_AV = rowMeans(hrs_GePhen_uni[,health], na.rm = TRUE)
summary(hrs_GePhen_uni$Health_AV)
####### Select variables for analyses
vars_rG <- c("Height_AV", "BMI_AV", "Health_AV", "ea_pgs3_edu3_ssgac18",
"Age_AV", "raedyrs", "raevbrn", "rabyear", "ragender",
"pc1_5a", "pc1_5b","pc1_5c","pc1_5d", "pc1_5e",
"pc6_10a", "pc6_10b", "pc6_10c", "pc6_10d", "pc6_10e")
data_rG <- hrs_GePhen_uni[vars_rG]
####### Center variables
data_rG$Height_AV_scaled =scale(data_rG$Height_AV)
data_rG$BMI_AV_scaled = scale(data_rG$BMI_AV)
data_rG$raedyrs_scaled =scale(data_rG$raedyrs)
data_rG$Health_AV_scaled =scale(data_rG$Health_AV)
data_rG$raevbrn_scaled =scale(data_rG$raevbrn)
####### Estimate models
# cross-trait prediction
M_rGHeight <- lm(Height_AV_scaled~ ea_pgs3_edu3_ssgac18+rabyear+ragender
+pc1_5a+pc1_5b+pc1_5c+pc1_5d +pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data =data_rG)
M_rHeight <- lm(Height_AV_scaled~ raedyrs_scaled +rabyear+ragender +
pc1_5a+pc1_5b+pc1_5c+pc1_5d+pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data=data_rG)
# cross-trait prediction
M_rGBMI <- lm(BMI_AV_scaled~ ea_pgs3_edu3_ssgac18+rabyear+ragender
+pc1_5a+pc1_5b+pc1_5c+pc1_5d +pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data =data_rG)
M_rBMI<- lm(BMI_AV_scaled~ raedyrs_scaled+rabyear+ragender +
pc1_5a+pc1_5b+pc1_5c+pc1_5d+ pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data= data_rG)
# cross-trait prediction
M_rGFert <- lm(raevbrn_scaled~ ea_pgs3_edu3_ssgac18+rabyear+ragender +
pc1_5a+pc1_5b+pc1_5c+pc1_5d+pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data =data_rG)
M_rFert<- lm(raevbrn_scaled~ raedyrs_scaled+rabyear+ragender +
pc1_5a+pc1_5b+pc1_5c+pc1_5d+ pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data= data_rG)
# cross-trait prediction
M_rGHealth <- lm(Health_AV_scaled~ Age_AV+ea_pgs3_edu3_ssgac18+rabyear+ragender
+pc1_5a+pc1_5b+pc1_5c+pc1_5d+pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e, data=data_rG)
M_rHealth<- lm(Health_AV_scaled~ raedyrs_scaled+rabyear+ragender +
pc1_5a+pc1_5b+pc1_5c+pc1_5d+ pc1_5e+
pc6_10a+pc6_10b+pc6_10c+pc6_10d+pc6_10e,data= data_rG)
####### Install helper packages
install.packages("tidyverse")
library(tidyverse)
install.packages("broom")
library(broom)
install.packages("stargazer")
library(stargazer)
####### Plot results
stargazer(M_rGHeight, M_rHeight, M_rGBMI, M_rBMI, M_rGFert,M_rFert,
M_rGHealth, M_rHealth, type = "text", single.row=T)
####### Install helper packages
install.packages("tidyverse")
library(tidyverse)
install.packages("broom")
library(broom)
install.packages("stargazer")
library(stargazer)
PreFer_train_data <- read.csv("//utuhome.utu.fi/tjnise/PreFer/5e8ab08c-b634-4948-8b47-8792d36d753f/training_data/PreFer_train_data.csv", header=FALSE)
View(PreFer_train_data)
PreFer_codebook <- read.csv("//utuhome.utu.fi/tjnise/PreFer/5e8ab08c-b634-4948-8b47-8792d36d753f/codebooks/PreFer_codebook.csv")
View(PreFer_codebook)
tabulate burstat
tabulate burgstat
freq(burgstat)
descr(positie)
PreFer_codebook <- read.csv("//utuhome.utu.fi/tjnise/PreFer/5e8ab08c-b634-4948-8b47-8792d36d753f/codebooks/PreFer_codebook.csv")
View(PreFer_codebook)
PreFer_codebook_summary <- read.csv("//utuhome.utu.fi/tjnise/PreFer/5e8ab08c-b634-4948-8b47-8792d36d753f/codebooks/PreFer_codebook_summary.csv", header=FALSE)
View(PreFer_codebook_summary)
library(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
train <- data.table::fread("tnise:/Prefer/5e8ab08c-b634-4948-8b47-8792d36d753f/training_data/PreFer_train_data.csv",
keepLeadingZeros = TRUE, # if FALSE adds zeroes to some dates
data.table = FALSE)
train <- data.table::fread("C:/Users/tnise/Prefer/5e8ab08c-b634-4948-8b47-8792d36d753f/training_data/PreFer_train_data.csv",
keepLeadingZeros = TRUE, # if FALSE adds zeroes to some dates
data.table = FALSE)
getwd()
train <- data.table::fread("C:/Users/tjnise/Prefer/5e8ab08c-b634-4948-8b47-8792d36d753f/training_data/PreFer_train_data.csv",
keepLeadingZeros = TRUE, # if FALSE adds zeroes to some dates
data.table = FALSE)
train <- data.table::fread("C:/Users/tjnise/Prefer/PreFer_train_data.csv",
keepLeadingZeros = TRUE, # if FALSE adds zeroes to some dates
data.table = FALSE)
install.packages("data.table")
library(data.table) # requires install.packages("data.table") first
train <- data.table::fread("C:/Users/tjnise/Prefer/PreFer_train_data.csv",
keepLeadingZeros = TRUE, # if FALSE adds zeroes to some dates
data.table = FALSE)
install.packages("data.table")
library(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
train <- data.table::fread("C:/Users/tjnise/Prefer/PreFer_train_data.csv",
keepLeadingZeros = TRUE, # if FALSE adds zeroes to some dates
data.table = FALSE)
train <- data.table::fread("//utuhome.utu.fi/tjnise/PreFer/PreFer_train_data.csv",
keepLeadingZeros = TRUE, # if FALSE adds zeroes to some dates
data.table = FALSE)
# loading the outcome
outcome <- data.table::fread("//utuhome.utu.fi/tjnise/PreFer/PreFer_train_outcome.csv",
data.table = FALSE)
clean_df <- function(df, background_df = NULL) {
# Process the input data to feed the model
# calculate age
df$age <- 2024 - df$birthyear_bg
# Selecting variables for modelling
keepcols = c('nomem_encr', # ID variable required for predictions,
'age',
'gender_bg')  # <-------- ADDED VARIABLE 'gender_bg'
# Keeping data with variables selected
df <- df[ , keepcols ]
# turning gender into factor
df$gender_bg<- as.factor(df$gender_bg) # <-------- ADDED THIS
return(df)
}
train_save_model <- function(cleaned_df, outcome_df) {
# Trains a model using the cleaned dataframe and saves the model to a file.
# Parameters:
# cleaned_df (dataframe): The cleaned data from clean_df function to be used for training the model.
# outcome_df (dataframe): The data with the outcome variable (e.g., from PreFer_train_outcome.csv or PreFer_fake_outcome.csv).
## This script contains a bare minimum working example
set.seed(1) # not useful here because logistic regression deterministic
# Combine cleaned_df and outcome_df
model_df <- merge(cleaned_df, outcome_df, by = "nomem_encr")
# Logistic regression model
model <- glm(new_child ~ age + gender_bg, family = "binomial", data = model_df) # <-------- ADDED VARIABLE 'gender_bg'
# Save the model
saveRDS(model, "model.rds")
}
# setwd("C:/Users/tjnise/Documents/Github/fertility-prediction-challenge") # <---- provide the path here
# preprocessing the data
train_cleaned <- clean_df(train)
# training and saving the model
train_save_model(train_cleaned, outcome)
# setwd("C:/Users/tjnise/Documents/Github/fertility-prediction-challenge") # <---- provide the path here
# preprocessing the data
train_cleaned <- clean_df(train)
# training and saving the model
train_save_model(train_cleaned, outcome)
#Testing on fake data
# load the fake data
fake <- data.table::fread("PreFer_fake_data.csv",
keepLeadingZeros = TRUE, # if FALSE adds zeroes to some dates
data.table = FALSE)
setwd("C:/Users/tjnise/Documents/Github/fertility-prediction-challenge") # <---- provide the path here
# preprocessing the data
train_cleaned <- clean_df(train)
# training and saving the model
train_save_model(train_cleaned, outcome)
#Testing on fake data
# load the fake data
fake <- data.table::fread("PreFer_fake_data.csv",
keepLeadingZeros = TRUE, # if FALSE adds zeroes to some dates
data.table = FALSE)
predict_outcomes <- function(df, background_df = NULL, model_path = "./model.rds"){
# Generate predictions using the saved model and the input dataframe.
# The predict_outcomes function accepts a dataframe as an argument
# and returns a new dataframe with two columns: nomem_encr and
# prediction. The nomem_encr column in the new dataframe replicates the
# corresponding column from the input dataframe The prediction
# column contains predictions for each corresponding nomem_encr. Each
# prediction is represented as a binary value: '0' indicates that the
# individual did not have a child during 2021-2023, while '1' implies that
# they did.
# Parameters:
# df (dataframe): The data dataframe for which predictions are to be made.
# background_df (dataframe): The background data dataframe for which predictions are to be made.
# model_path (str): The path to the saved model file (which is the output of training.R).
# Returns:
# dataframe: A dataframe containing the identifiers and their corresponding predictions.
## This script contains a bare minimum working example
if( !("nomem_encr" %in% colnames(df)) ) {
warning("The identifier variable 'nomem_encr' should be in the dataset")
}
# Load the model
model <- readRDS(model_path)
# Preprocess the fake / holdout data
df <- clean_df(df, background_df)
# Exclude the variable nomem_encr if this variable is NOT in your model
vars_without_id <- colnames(df)[colnames(df) != "nomem_encr"]
# Generate predictions from model
predictions <- predict(model,
subset(df, select = vars_without_id),
type = "response")
# Create predictions that should be 0s and 1s rather than, e.g., probabilities
predictions <- ifelse(predictions > 0.5, 1, 0)
# Output file should be data.frame with two columns, nomem_encr and predictions
df_predict <- data.frame("nomem_encr" = df[ , "nomem_encr" ], "prediction" = predictions)
# Force columnnames (overrides names that may be given by `predict`)
names(df_predict) <- c("nomem_encr", "prediction")
# Return only dataset with predictions and identifier
return( df_predict )
}
# apply the function to the fake data
predict_outcomes(fake)
# loading data (predictors)
install.packages("data.table")
library(data.table) # requires install.packages("data.table") first
train <- data.table::fread("//utuhome.utu.fi/tjnise/PreFer/PreFer_train_data.csv",
keepLeadingZeros = TRUE, # if FALSE adds zeroes to some dates
data.table = FALSE)
